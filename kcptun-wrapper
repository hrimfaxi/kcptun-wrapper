#!/bin/bash

UDP2RAW_MODE=
UDP2RAW_KEY=
UDP2RAW_CIPHER_MODE=
UDP2RAW_PID=

KCPTUN_PID=

func_trap() {
    local signal="$1"
    # we can't kill background child process with signal INT
    if [[ "$signal" == INT ]]; then signal=TERM; fi
    if [[ "$signal" == EXIT ]]; then signal=TERM; fi
    if [[ -n "$KCPTUN_PID" ]]; then
        echo sudo kill -s "$signal" "$KCPTUN_PID"
        sudo kill -s "$signal" "$KCPTUN_PID"
        KCPTUN_PID=
    fi
    if [[ -n "$UDP2RAW_PID" ]]; then
        PIDS=$(ps h --ppid "$UDP2RAW_PID" -o pid)
        # echo PID: $PIDS UDP2RAW_PID: $UDP2RAW_PID
        echo sudo kill -s "$signal" $PIDS
        sudo kill -s "$signal" "$PIDS"
        sudo kill -s "$signal" "$UDP2RAW_PID" 2> /dev/null
        UDP2RAW_PID=
    fi
}

trap_with_arg() {
    local func sig
    func="$1"
    shift
    for sig ; do
        trap "$func $sig" "$sig"
    done
}

nextToken() {
    result=
    while true; do
        offset=$((offset+1))
        ch="${1:$offset:1}"
        if [[ -z "$ch" ]]; then break; fi
        if [[ "$ch" == "\\" ]]; then
            offset=$((offset+1))
            ch="${1:$offset:1}"
            if [[ -z "$ch" ]]; then
                echo "nothing following final escape in $1" >&2
                exit 1
            fi
        else
            case "$2" in *"$ch"*) break;; esac
        fi
        result="$result$ch"
    done
}

# setHosts "$SS_LOCAL_HOST" "$SS_LOCAL_PORT" "$SS_REMOTE_HOST" "$SS_REMOTE_PORT"
setHosts() {
    setAddr() {
        local value="$3:$4"
        case "$3" in "["*) ;; *":"*) value="[$3]:$4";; esac
        if [[ "$1" -eq 0 ]]; then
            key0="--$2"
            value0="$value"
        else
            key1="--$2"
            value1="$value"
        fi
    }
    if [[ "$type" == 'client' ]]; then
        setAddr 0 localaddr "${1:-127.0.0.1}" "${2:-12948}"
        setAddr 1 remoteaddr "${3:-vps}" "${4:-29900}"
    elif [[ "$type" == 'server' ]]; then
        setAddr 0 listen "$3" "${4:-29900}"
        setAddr 1 target "${1:-127.0.0.1}" "${2:-12948}"
    elif [[ "$type" == 'udp2raw-client' ]]; then
        setAddr 0 localaddr "${1:-127.0.0.1}" "${2:-12948}"
        setAddr 1 remoteaddr "${1:-127.0.0.1}" "${2:-12948}"
    elif [[ "$type" == 'udp2raw-server' ]]; then
        setAddr 0 listen "$3" "${4:-29900}"
        setAddr 1 target "${1:-127.0.0.1}" "${2:-12948}"
    else
        echo "Invalid type: $type" >&2
        exit 1
    fi
}

determine_type() {
    local name=$(basename $0)
    
    if [[ "$name" == "kcptun-client-wrapper" ]] ; then
        type=client
        bin=$(type -p kcptun-client)
    elif [[ "$name" == "kcptun-server-wrapper" ]]; then
        type=server
        bin=$(type -p kcptun-server)
    elif [[ "$name" == "kcptun-udp2raw-client-wrapper" ]] ; then
        type=udp2raw-client
        bin=$(type -p kcptun-client)
    elif [[ "$name" == "kcptun-udp2raw-server-wrapper" ]]; then
        type=udp2raw-server
        bin=$(type -p kcptun-server)
    else
        echo type must be either 'client' or 'server' >&2
        exit 1
    fi
}

execute() {
    local opts="$SS_PLUGIN_OPTIONS"
    if [[ -n "$opts" ]]; then
        local len="$#"
        offset=-1
        while true; do
            nextToken "$opts" "=;"
            if [[ -z "$result" ]]; then
                echo "empty key in $opts" >&2
                exit 1
            fi
            if [[ "$result" == "udp2raw_mode" ]]; then
                nextToken "$opts" ";"
                UDP2RAW_MODE="$result"
                nextToken "$opts" "=;"
            fi
            if [[ -z "$ch" ]]; then break; fi
            if [[ "$result" == "udp2raw_key" ]]; then
                nextToken "$opts" ";"
                UDP2RAW_KEY="$result"
                nextToken "$opts" "=;"
            fi
            if [[ -z "$ch" ]]; then break; fi
            if [[ "$result" == "udp2raw_cipher_mode" ]]; then
                nextToken "$opts" ";"
                UDP2RAW_CIPHER_MODE="$result"
                nextToken "$opts" "=;"
            fi
            if [[ -z "$ch" ]]; then break; fi
            set -- "$@" "--$result"
            if [[ "$ch" == "=" ]]; then
                nextToken "$opts" ";"
                set -- "$@" "$result"
            fi
            if [[ -z "$ch" ]]; then break; fi
        done

        while [[ "$len" -gt 0 ]]; do
            len=$((len-1))
            set -- "$@" "$1"
            shift
        done
    fi

    determine_type

    setHosts "$SS_LOCAL_HOST" "$SS_LOCAL_PORT" "$SS_REMOTE_HOST" "$SS_REMOTE_PORT"

    UDP2RAW_MODE=${UDP2RAW_MODE:-faketcp}
    UDP2RAW_CIPHER_MODE=${UDP2RAW_CIPHER_MODE:-aes128cbc}
    UDP2RAW_KEY="${UDP2RAW_KEY:-secret key}"

    if [[ "$type" == "udp2raw-client" ]]; then
        sudo udp2raw -c -l "$SS_LOCAL_HOST:$SS_LOCAL_PORT" -r "$SS_REMOTE_HOST:$SS_REMOTE_PORT" --raw-mode $UDP2RAW_MODE --cipher-mode $UDP2RAW_CIPHER_MODE -k $UDP2RAW_KEY -a &
    elif [[ "$type" == "udp2raw-server" ]]; then
        if [[ $UDP2RAW_MODE == "icmp" ]]; then
            remote_port=60001
        else
            remote_port=$SS_REMOTE_PORT
        fi
        sudo udp2raw -s -l "$SS_REMOTE_HOST:$remote_port" -r "$SS_LOCAL_HOST:$SS_REMOTE_PORT" --raw-mode $UDP2RAW_MODE --cipher-mode $UDP2RAW_CIPHER_MODE -k $UDP2RAW_KEY -a &
    fi
    UDP2RAW_PID=$!
    if [[ -z "$UDP2RAW_PID" ]]; then
        echo Unknown error occur, cannot get process id of child process. >&2
        exit 1
    fi
    # When we quit, we go with udp2raw
    trap_with_arg func_trap HUP INT QUIT ILL TRAP ABRT BUS FPE USR1 SEGV USR2 PIPE ALRM TERM EXIT
    
    unset SS_LOCAL_HOST SS_LOCAL_PORT SS_REMOTE_HOST SS_REMOTE_PORT SS_PLUGIN_OPTIONS

    echo "$bin" "$key0" "$value0" "$key1" "$value1" "$@"
    "$bin" "$key0" "$value0" "$key1" "$value1" "$@" &
    KCPTUN_PID=$!
    if [[ -z "$KCPTUN_PID" ]]; then
        echo Unknown error occur, cannot get process id of child process. >&2
        exit 1
    fi

    while true; do
        local value=0
        wait "$KCPTUN_PID" 2>/dev/null || value=$?
        # 127 means this pid is not child process of our shell.
        if [[ "$value" == 127 ]]; then break; fi
        wait_result="$value"
        if [[ "$value" == 0 ]]; then break; fi
        # yield control of the CPU
        sleep 0.1 || sleep 1
        if ! kill -0 "$KCPTUN_PID" 2>/dev/null; then break; fi
    done
    KCPTUN_PID=
    return $wait_result
}

sudo true
execute "$@"
